name: 'Build'

on:
  push:
    branches:
      - dev
      - "release*"
    tags:
      - '*'
  pull_request:

env:
  TARGETS: f7
  DEFAULT_TARGET: f7
  FBT_TOOLCHAIN_PATH: /home/runner/work

jobs:
  main:
    runs-on: ubuntu-latest
    steps:
      - name: 'Decontaminate previous build leftovers'
        run: |
          if [ -d .git ]; then
            git submodule status || git checkout "$(git rev-list --max-parents=0 HEAD | tail -n 1)"
          fi

      - name: 'Checkout code'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: 'Get commit details'
        id: names
        run: |
          if [[ ${{ github.event_name }} == 'pull_request' ]]; then
            TYPE="pull"
          elif [[ "${{ github.ref }}" == "refs/tags/"* ]]; then
            TYPE="tag"
          else
            TYPE="other"
          fi
          python3 scripts/get_env.py "--event_file=${{ github.event_path }}" "--type=$TYPE"
          echo random_hash=$(openssl rand -base64 40 | shasum -a 256 | awk '{print $1}') >> $GITHUB_OUTPUT
          echo "event_type=$TYPE" >> $GITHUB_OUTPUT

      - name: 'Make artifacts directory'
        run: |
          rm -rf artifacts
          mkdir artifacts

      - name: 'Bundle scripts'
        if: ${{ !github.event.pull_request.head.repo.fork }}
        run: |
          tar czpf artifacts/flipper-z-any-scripts-${SUFFIX}.tgz scripts debug

      - name: 'Build the firmware'
        run: |
          set -e
          for TARGET in ${TARGETS}; do
                ./fbt TARGET_HW="$(echo "${TARGET}" | sed 's/f//')" \
                copro_dist updater_package ${{ startsWith(github.ref, 'refs/tags') && 'DEBUG=0 COMPACT=1' || '' }}
          done

      - name: 'Move upload files'
        if: ${{ !github.event.pull_request.head.repo.fork }}
        run: |
          set -e
          for TARGET in ${TARGETS}; do
            mv dist/${TARGET}-*/* artifacts/
          done
          
      - name: 'Archive artifacts'
        uses: actions/upload-artifact@v3
        with:
          name: fimrware
          path: |
            dist artifacts/

      - name: "Check for uncommitted changes"
        run: |
          git diff --exit-code

      - name: 'Bundle resources'
        if: ${{ !github.event.pull_request.head.repo.fork }}
        run: |
          tar czpf "artifacts/flipper-z-any-resources-${SUFFIX}.tgz" -C assets resources

      - name: 'Bundle core2 firmware'
        if: ${{ !github.event.pull_request.head.repo.fork }}
        run: |
          cp build/core2_firmware.tgz "artifacts/flipper-z-any-core2_firmware-${SUFFIX}.tgz"

      - name: 'Copy map analyser files'
        if: ${{ !github.event.pull_request.head.repo.fork }}
        run: |
          cp build/f7-firmware-*/firmware.elf.map map_analyser_files/firmware.elf.map
          cp build/f7-firmware-*/firmware.elf map_analyser_files/firmware.elf
          cp ${{ github.event_path }} map_analyser_files/event.json

      - name: 'Find Previous Comment'
        if: ${{ !github.event.pull_request.head.repo.fork && github.event.pull_request }}
        uses: peter-evans/find-comment@v1
        id: fc
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: 'Compiled firmware for commit'

      - name: 'Create or update comment'
        if: ${{ !github.event.pull_request.head.repo.fork && github.event.pull_request}}
        uses: peter-evans/create-or-update-comment@v1
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            **Compiled firmware for commit `${{steps.names.outputs.commit_sha}}`:**
            - [üì¶ Update package](https://update.flipperzero.one/builds/firmware/${{steps.names.outputs.branch_name}}/flipper-z-${{steps.names.outputs.default_target}}-update-${{steps.names.outputs.suffix}}.tgz)
            - [üì• DFU file](https://update.flipperzero.one/builds/firmware/${{steps.names.outputs.branch_name}}/flipper-z-${{steps.names.outputs.default_target}}-full-${{steps.names.outputs.suffix}}.dfu)
            - [‚òÅÔ∏è Web/App updater](https://lab.flipper.net/?url=https://update.flipperzero.one/builds/firmware/${{steps.names.outputs.branch_name}}/flipper-z-${{steps.names.outputs.default_target}}-update-${{steps.names.outputs.suffix}}.tgz&channel=${{steps.names.outputs.branch_name}}&version=${{steps.names.outputs.commit_sha}})
          edit-mode: replace

  compact:
    if: ${{ !startsWith(github.ref, 'refs/tags') }}
    runs-on: ubuntu-latest
    steps:
      - name: 'Decontaminate previous build leftovers'
        run: |
          if [ -d .git ]
          then
            git submodule status \
              || git checkout "$(git rev-list --max-parents=0 HEAD | tail -n 1)"
          fi

      - name: 'Checkout code'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: true
          ref: ${{ github.event.pull_request.head.sha }}

      - name: 'Get commit details'
        run: |
          if [[ ${{ github.event_name }} == 'pull_request' ]]; then
            TYPE="pull"
          elif [[ "${{ github.ref }}" == "refs/tags/"* ]]; then
            TYPE="tag"
          else
            TYPE="other"
          fi
          python3 scripts/get_env.py "--event_file=${{ github.event_path }}" "--type=$TYPE"

      - name: 'Build the firmware'
        run: |
          set -e
          for TARGET in ${TARGETS}; do
                ./fbt TARGET_HW="$(echo "${TARGET}" | sed 's/f//')" \
                updater_package DEBUG=0 COMPACT=1
          done
